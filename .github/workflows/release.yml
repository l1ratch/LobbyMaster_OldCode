name: Build and Release Plugin

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Extract version and description from commit message
        id: extract_info
        run: |
          # Извлечение версии из текста коммита
          VERSION=$(git log -1 --pretty=%B | grep -oP 'int_ver: \K[\d.]+')
          
          if [ -z "$VERSION" ]; then
            echo "Version not found in commit message"
            exit 1
          fi

          # Извлечение описания из текста коммита
          DESCRIPTION=$(git log -1 --pretty=%B | grep -oP 'Изменения: \K.*')
          
          if [ -z "$DESCRIPTION" ]; then
            echo "Description not found in commit message"
            DESCRIPTION="No detailed description provided."
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV

      - name: Determine the next available version
        id: determine_version
        run: |
          BASE_VERSION=${{ env.VERSION }}

          # Инициализация переменных для определения версии
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=${PATCH:-0}
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"

          # Поиск следующей доступной версии
          while git rev-parse "v$NEXT_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          done

          FINAL_VERSION="v$NEXT_VERSION"

          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "Determined next available version: $FINAL_VERSION"

      - name: Build with Maven
        run: mvn clean package -Dproject.version=${{ env.FINAL_VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.FINAL_VERSION }}
          release_name: ${{ env.FINAL_VERSION }}
          body: ${{ env.DESCRIPTION }}
          draft: false
          prerelease: false

      - name: Upload .jar to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/LobbyMaster-${{ env.FINAL_VERSION }}-shaded.jar
          asset_name: LobbyMaster-${{ env.FINAL_VERSION }}.jar
          asset_content_type: application/java-archive
