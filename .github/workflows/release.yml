name: Build and Release Plugin

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build with Maven
        run: mvn clean package

      - name: Extract version from pom.xml
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Check if tag exists and determine next version
        id: determine_version
        run: |
          BASE_VERSION=${{ env.VERSION }}
          TAG_EXISTS=false
          NEXT_VERSION=$BASE_VERSION
          
          # Extract the base version number (e.g., 1.0.0)
          BASE=$(echo $BASE_VERSION | grep -oP '(\d+\.\d+\.\d+)')

          # Check if the base version tag exists
          if git rev-parse "v$BASE" >/dev/null 2>&1; then
            TAG_EXISTS=true

            # Loop to find the next available patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
            while git rev-parse "v$MAJOR.$MINOR.$PATCH" >/dev/null 2>&1; do
              PATCH=$((PATCH + 1))
            done
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "FINAL_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: ${{ env.TAG_EXISTS == 'false' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: v${{ env.FINAL_VERSION }}
          release_name: v${{ env.FINAL_VERSION }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Upload .jar to Release
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: GameModeSwitcher-v${{ env.FINAL_VERSION }}.jar
          asset_content_type: application/java-archive
