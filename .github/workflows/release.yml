name: Build and Release Plugin

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Загружаем все коммиты и теги

      - name: Fetch all tags
        run: git fetch --tags

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [ -z "$VERSION" ]; then
            echo "Version not found in pom.xml"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract full commit message as description
        id: extract_description
        run: |
          DESCRIPTION=$(git log -1 --pretty=%B)
          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV

      - name: Determine the next available version
        id: determine_version
        run: |
          BASE_VERSION=${{ env.VERSION }}
          PATCH=0
          NEXT_VERSION="$BASE_VERSION.$PATCH"

          while git rev-parse "v$NEXT_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEXT_VERSION="$BASE_VERSION.$PATCH"
          done

          FINAL_VERSION="v$NEXT_VERSION"
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "Determined next available version: $FINAL_VERSION"

      - name: Build with Maven
        run: mvn clean package -Dproject.version=${{ env.FINAL_VERSION }}

      - name: Check if JAR file exists
        run: ls -lh target/

      - name: Rename JAR file to match version
        run: |
          JAR_FILE=$(ls target/LobbyMaster-*.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "JAR file not found!"
            exit 1
          fi
          mv "$JAR_FILE" "target/LobbyMaster-${{ env.FINAL_VERSION }}-shaded.jar"

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.TOKEN }}" | gh auth login --with-token

      - name: Create GitHub Release using gh cli
        run: |
          gh release create ${{ env.FINAL_VERSION }} target/LobbyMaster-${{ env.FINAL_VERSION }}-shaded.jar --title "${{ env.FINAL_VERSION }}" --notes "${{ env.DESCRIPTION }}"
